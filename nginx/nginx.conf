user www-data;

worker_processes auto;

events {
  worker_connections 1024;
}

http {

  include mime.types;

  # for testing we used siege package (apr-get install siege)
  # command siege -v -r 2 -c 5 https://157.245.68.227/thumb.png
  # $server_name - apply limit to requests by server_name
  # $binary_remote_addr - limit zone by ip address (better)
  # $request_uri - apply limit if certain uri receive more connection requests than the zone allow
  # command means apply limit by uri for zone-name:memory limit in memory and rate for prevate spikes
  # we also can add burst=5 here which will allow 1 + 5 connections per second
  # but it will behave like buffer so it will allow connections after given second (like traffic shaping)
  # if you don't want to shape traffic you may want to add nodelay option, so all requests will served asap. rate limit still applies though
  limit_req_zone $request_uri zone=MYZONE:10m rate=60r/m;

  # Redirect HTTP traffic to HTTPS
  server {
    listen 80;
    server_name 167.99.93.26;
    # return 301 https://$server_name$request_uri; will also work well
    return 301 https://$host$request_uri;
  }

  server {
    # ssl - use installed ssl module to use https for connections on 443 port
    # http2 - use installed http2 module to use HTTP/2.0 for connections
    # (!) if browser does not support HTTP/2.0 fallback to HTTP/1.0 automatically
    listen 443 ssl http2;
    server_name 167.99.93.26;

    root /sites/demo;

    index index.html;

    # Enable basic ssl in nginx
    # Self-signed certificates were generated via openssl
    # Self-signed certificates has to be manually added as trusted
    ssl_certificate /etc/nginx/ssl/self.crt;
    ssl_certificate_key /etc/nginx/ssl/self.key;

    # Disable outdated SSL protocl with not so outdated TLS
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

    # Optimise cipher suits
    ssl_prefer_server_ciphers on;
    # suits below might become outdates - should update regulary
    ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;

    # Enable DH params
    # Also need to create dhparam.pem in directory below before reloading nginx
    # with command openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048(with should equeals your rsa value for key in ssl)
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;

    # Enable HSTS - basically do not accept responses via HTTP
    add_header Strict-Transport-Security "max-age=31536000" always;

    # SSL sessions
    ssl_session_cache shared:SSL:40m;
    ssl_session_timeout 4h;
    ssl_session_tickets on;
    
    location / {
      # For adding basic auth you need to install apache2-utils package
      # and generate .htpasswd file in nginx directory with htpasswd -c /etc/nginx/.htpasswd %USERNAME% command
      auth_basic "Secure Area";
      auth_basic_user_file /etc/nginx/.htpasswd;
      try_files $uri $uri/ =404;
    }

    location ~\.php$ {
      # Pass php requests to the php-fpm service (fastcgi)
      include fastcgi.conf;
      fastcgi_pass unix:/run/php/php7.2-fpm.sock;
    }
  }
}